% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/simulator.R
\docType{data}
\name{Simmer}
\alias{Simmer}
\title{Simmer}
\description{
The simulation environment.
}
\section{Methods}{

\preformatted{## Object creation
Simmer$new(name="anonymous", verbose=FALSE)
}\describe{
  \item{name}{the name of the simulator}
  \item{verbose}{enable showing event information}
}
\preformatted{## Reset the simulator (time, statistics, resources, generators)
Simmer$reset()
}\preformatted{## Get the current simulation time
Simmer$now()
}
\preformatted{## Get the time of the next scheduled event
Simmer$peek()
}
\preformatted{## Process the next event
Simmer$step()
}
\preformatted{## Execute steps until the given criterion
Simmer$run(until=1000)
}\describe{
  \item{until}{the stop time}
}
\preformatted{## Add a resource to the simulation environment
Simmer$add_resource(name, capacity=1, queue_size=Inf, mon=TRUE)
}\describe{
  \item{name}{the name of the resource}
  \item{capacity}{the capacity of the server}
  \item{queue_size}{the size of the queue}
  \item{mon}{whether the simulator must monitor this resource or not}
}
\preformatted{## Add a generator to the simulation environment
Simmer$add_generator(name_prefix, trajectory, dist, mon=TRUE)
}\describe{
  \item{name_prefix}{the name prefix of the generated arrivals}
  \item{trajectory}{the \link{Trajectory} that the generated arrivals will follow}
  \item{dist}{a function modelling the interarrival times (returning a negative value stops the generator)}
  \item{mon}{whether the simulator must monitor the generated arrivals or not}
}
\preformatted{## Get arrival statistics
Simmer$get_mon_arrivals()
}
\preformatted{## Get resource statistics
Simmer$get_mon_resources()
}
\preformatted{## Get resource's capacity
Simmer$get_capacity(name)
}\describe{
  \item{name}{the name of the resource}
}
\preformatted{## Get resource's queue size
Simmer$get_queue_size(name)
}\describe{
  \item{name}{the name of the resource}
}
\preformatted{## Get resource's server count
Simmer$get_server_count(name)
}\describe{
  \item{name}{the name of the resource}
}
\preformatted{## Get resource's queue count
Simmer$get_queue_count(name)
}\describe{
  \item{name}{the name of the resource}
}
}
\examples{
t0 <- Trajectory$new("my trajectory") $
  ## add an intake activity
  seize("nurse", 1) $
  timeout(function() rnorm(1, 15)) $
  release("nurse", 1) $
  ## add a consultation activity
  seize("doctor", 1) $
  timeout(function() rnorm(1, 20)) $
  release("doctor", 1) $
  ## add a planning activity
  seize("administration", 1) $
  timeout(function() rnorm(1, 5)) $
  release("administration", 1)

simmer <- Simmer$new("SuperDuperSim") $
  add_resource("nurse", 1) $
  add_resource("doctor", 2) $
  add_resource("administration", 1) $
  add_generator("patient", t0, function() rnorm(1, 10, 2))

simmer$run(until=80)

plot_resource_usage(simmer, "doctor")
}
\seealso{
\link{Trajectory}
}
\keyword{datasets}

